#include "../sys.h"
#include "vga.h"

u32 buffer = 0xa0000;

// Hardcode pixel values for OS font
u8 text[96][6] = {
    {0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000},
    {0b00000000,0b00000000,0b11111010,0b00000000,0b00000000,0b00000000},
    {0b00000000,0b11100000,0b00000000,0b11100000,0b00000000,0b00000000},
    {0b00101000,0b11111110,0b00101000,0b11111110,0b00101000,0b00000000},
    {0b00100100,0b01010100,0b11111110,0b01010100,0b01001000,0b00000000},
    {0b11000100,0b11001000,0b00010000,0b00100110,0b01000110,0b00000000},
    {0b01101100,0b10010010,0b01101010,0b00000100,0b00001010,0b00000000},
    {0b00000000,0b00010000,0b11100000,0b11000000,0b00000000,0b00000000},
    {0b00000000,0b00111000,0b01000100,0b10000010,0b00000000,0b00000000},
    {0b00000000,0b10000010,0b01000100,0b00111000,0b00000000,0b00000000},
    {0b01010000,0b00100000,0b11111000,0b00100000,0b01010000,0b00000000},
    {0b00010000,0b00010000,0b01111100,0b00010000,0b00010000,0b00000000},
    {0b00000000,0b00000001,0b00001110,0b00001100,0b00000000,0b00000000},
    {0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00000000},
    {0b00000000,0b00000000,0b00000110,0b00000110,0b00000000,0b00000000},
    {0b00000100,0b00001000,0b00010000,0b00100000,0b01000000,0b00000000},
    {0b01111100,0b10001010,0b10010010,0b10100010,0b01111100,0b00000000},
    {0b00000000,0b01000010,0b11111110,0b00000010,0b00000000,0b00000000},
    {0b01001110,0b10010010,0b10010010,0b10010010,0b01100010,0b00000000},
    {0b10000100,0b10000010,0b10010010,0b10110010,0b11001100,0b00000000},
    {0b00011000,0b00101000,0b01001000,0b11111110,0b00001000,0b00000000},
    {0b11100100,0b10100010,0b10100010,0b10100010,0b10011100,0b00000000},
    {0b00111100,0b01010010,0b10010010,0b10010010,0b10001100,0b00000000},
    {0b10000010,0b10000100,0b10001000,0b10010000,0b11100000,0b00000000},
    {0b01101100,0b10010010,0b10010010,0b10010010,0b01101100,0b00000000},
    {0b01100010,0b10010010,0b10010010,0b10010100,0b01111000,0b00000000},
    {0b00000000,0b00000000,0b00101000,0b00000000,0b00000000,0b00000000},
    {0b00000000,0b00000010,0b00101100,0b00000000,0b00000000,0b00000000},
    {0b00000000,0b00010000,0b00101000,0b01000100,0b10000010,0b00000000},
    {0b00101000,0b00101000,0b00101000,0b00101000,0b00101000,0b00000000},
    {0b00000000,0b10000010,0b01000100,0b00101000,0b00010000,0b00000000},
    {0b01000000,0b10000000,0b10011010,0b10010000,0b01100000,0b00000000},
    {0b01111100,0b10000010,0b10111010,0b10011010,0b01110010,0b00000000},
    {0b00111110,0b01001000,0b10001000,0b01001000,0b00111110,0b00000000},
    {0b11111110,0b10010010,0b10010010,0b10010010,0b01101100,0b00000000},
    {0b01111100,0b10000010,0b10000010,0b10000010,0b01000100,0b00000000},
    {0b11111110,0b10000010,0b10000010,0b10000010,0b01111100,0b00000000},
    {0b11111110,0b10010010,0b10010010,0b10010010,0b10000010,0b00000000},
    {0b11111110,0b10010000,0b10010000,0b10010000,0b10000000,0b00000000},
    {0b01111100,0b10000010,0b10000010,0b10001010,0b11001110,0b00000000},
    {0b11111110,0b00010000,0b00010000,0b00010000,0b11111110,0b00000000},
    {0b00000000,0b10000010,0b11111110,0b10000010,0b00000000,0b00000000},
    {0b00000100,0b00000010,0b10000010,0b11111100,0b10000000,0b00000000},
    {0b11111110,0b00010000,0b00101000,0b01000100,0b10000010,0b00000000},
    {0b11111110,0b00000010,0b00000010,0b00000010,0b00000010,0b00000000},
    {0b11111110,0b01000000,0b00111000,0b01000000,0b11111110,0b00000000},
    {0b11111110,0b00100000,0b00010000,0b00001000,0b11111110,0b00000000},
    {0b01111100,0b10000010,0b10000010,0b10000010,0b01111100,0b00000000},
    {0b11111110,0b10010000,0b10010000,0b10010000,0b01100000,0b00000000},
    {0b01111100,0b10000010,0b10001010,0b10000100,0b01111010,0b00000000},
    {0b11111110,0b10010000,0b10011000,0b10010100,0b01100010,0b00000000},
    {0b01100100,0b10010010,0b10010010,0b10010010,0b01001100,0b00000000},
    {0b11000000,0b10000000,0b11111110,0b10000000,0b11000000,0b00000000},
    {0b11111100,0b00000010,0b00000010,0b00000010,0b11111100,0b00000000},
    {0b11111000,0b00000100,0b00000010,0b00000100,0b11111000,0b00000000},
    {0b11111100,0b00000010,0b00011100,0b00000010,0b11111100,0b00000000},
    {0b11000110,0b00101000,0b00010000,0b00101000,0b11000110,0b00000000},
    {0b11000000,0b00100000,0b00011110,0b00100000,0b11000000,0b00000000},
    {0b10000110,0b10011010,0b10010010,0b10110010,0b11000010,0b00000000},
    {0b00000000,0b00010000,0b01101100,0b10000010,0b00000000,0b00000000},
    {0b01000000,0b00100000,0b00010000,0b00001000,0b00000100,0b00000000},
    {0b00000000,0b10000010,0b01101100,0b00010000,0b00000000,0b00000000},
    {0b00100000,0b01000000,0b10000000,0b01000000,0b00100000,0b00000000},
    {0b00000010,0b00000010,0b00000010,0b00000010,0b00000010,0b00000000},
    {0b00000000,0b11000000,0b11100000,0b00010000,0b00000000,0b00000000},
    {0b00000100,0b00101010,0b00101010,0b00011110,0b00000010,0b00000000},
    {0b11111110,0b00010100,0b00100010,0b00100010,0b00011100,0b00000000},
    {0b00011100,0b00100010,0b00100010,0b00100010,0b00010100,0b00000000},
    {0b00011100,0b00100010,0b00100010,0b00010100,0b11111110,0b00000000},
    {0b00011100,0b00101010,0b00101010,0b00101010,0b00011000,0b00000000},
    {0b00000000,0b00010000,0b01111110,0b10010000,0b01000000,0b00000000},
    {0b00011000,0b00100101,0b00100101,0b00111001,0b00011110,0b00000000},
    {0b11111110,0b00010000,0b00100000,0b00100000,0b00011110,0b00000000},
    {0b00000000,0b00100010,0b10111110,0b00000010,0b00000000,0b00000000},
    {0b00000100,0b00000010,0b00000010,0b10111100,0b00000000,0b00000000},
    {0b11111110,0b00001000,0b00010100,0b00100010,0b00000000,0b00000000},
    {0b00000000,0b10000010,0b11111110,0b00000010,0b00000000,0b00000000},
    {0b00111110,0b00100000,0b00011110,0b00100000,0b00011110,0b00000000},
    {0b00111110,0b00010000,0b00100000,0b00100000,0b00011110,0b00000000},
    {0b00011100,0b00100010,0b00100010,0b00100010,0b00011100,0b00000000},
    {0b00111111,0b00011000,0b00100100,0b00100100,0b00011000,0b00000000},
    {0b00011000,0b00100100,0b00100100,0b00011000,0b00111111,0b00000000},
    {0b00111110,0b00010000,0b00100000,0b00100000,0b00010000,0b00000000},
    {0b00010010,0b00101010,0b00101010,0b00101010,0b00100100,0b00000000},
    {0b00100000,0b00100000,0b11111100,0b00100010,0b00100100,0b00000000},
    {0b00111100,0b00000010,0b00000010,0b00000100,0b00111110,0b00000000},
    {0b00111000,0b00000100,0b00000010,0b00000100,0b00111000,0b00000000},
    {0b00111100,0b00000010,0b00001100,0b00000010,0b00111100,0b00000000},
    {0b00100010,0b00010100,0b00001000,0b00010100,0b00100010,0b00000000},
    {0b00110010,0b00001001,0b00001001,0b00001001,0b00111110,0b00000000},
    {0b00100010,0b00100110,0b00101010,0b00110010,0b00100010,0b00000000},
    {0b00000000,0b00010000,0b01101100,0b10000010,0b00000000,0b00000000},
    {0b00000000,0b00000000,0b11111110,0b00000000,0b00000000,0b00000000},
    {0b00000000,0b10000010,0b01101100,0b00010000,0b00000000,0b00000000},
    {0b00010000,0b00100000,0b00010000,0b00001000,0b00010000,0b00000000},
    {0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000},
};

// update buffer loc
void update_buffer_loc(u32 loc){
    buffer = loc;
}

// unchains vga planes allowing full access to all vga memory
void unchain(){
    outp(0x03c4, 0x04);
    outp(0x03c5, 0x06);
    outp(0x03d4, 0x14);
    outp(0x03d5, 0x00);
    outp(0x03d4, 0x17);
    outp(0x03d5, 0xe3);

    outp(0x03d4, 0x11);
    outp(0x03d5, 0x2c);

    // sets mode as 320x240 for 1:1 pixel ratio
    outpw(0x03d4, 0x2c11);
    outpw(0x03d4, 0x0d06);
    outpw(0x03d4, 0x3e07);
    outpw(0x03d4, 0xea10);
    outpw(0x03d4, 0xac11); 
    outpw(0x03d4, 0xdf12);
    outpw(0x03d4, 0xe715);
    outpw(0x03d4, 0x0616);

}






// draws pixel onto buffer
void draw_pixel(u16 x, u16 y, u8 rgb){
    
    outpw(0x03c4, ((1 << (x & 3) << 8) + 0x0002));      // selects planes...
    *(u8*) (buffer + (x + (y*320))/4) = rgb;           // plot
    
};

// like draw_pixel but draws a horizontal line of 4 pixels
void draw_4(u16 x, u16 y, u8 colour){
    //outpw(0x03c4, 0x0f02);                            --> this must be called before using draw_4
    *(u8*) (buffer + (x + (y*80))) = colour;
}

// only allows multiples of 4 for x and width
void draw_rectangle(u16 x, u16 y, u16 w, u16 h, u8 rgb){
    // convert general coords to draw-4 coords
    x /= 4;
    w /= 4;
    
    outpw(0x03c4, 0x0f02);
    for (u16 ver = y; ver < (y + h); ver++){
        for (u16 hor = x; hor < (x + w); hor++){   
            draw_4(hor, ver, rgb);
        }
    }
}

// draws lines
void draw_hor_line(u16 x, u16 y, u16 w, u8 rgb){
    x /= 4;
    w /= 4;

    outpw(0x03c4, 0x0f02);
    for(u16 hor = x; hor < (x + w); hor++){
        draw_4(hor, y, rgb);
    }
}

void draw_hor_line_exact(u16 x, u16 y, u16 w, u8 rgb){
    for (u16 hor = x; hor < (x + w); hor++){
        draw_pixel(hor, y, rgb);
    }
}

void draw_vert_line(u16 x, u16 y, u16 h, u8 rgb){
    outpw(0x03c4, ((1 << (x & 3) << 8) + 0x0002));
    for (u16 ver = y; ver < (y + h); ver++){
        *(u8*) (buffer + (x + (ver*320))/4) = rgb;
    }
}


// draw cursor
void draw_cursor(u16 x, u16 y){
    draw_vert_line(x, y, 12, 0x00);

    draw_pixel(x+1, y+11, 0x00);
    draw_pixel(x+2, y+10, 0x00);
    draw_pixel(x+3, y+9, 0x00);
    draw_pixel(x+4, y+8, 0x00);
    draw_pixel(x+5, y+8, 0x00);
    draw_pixel(x+6, y+8, 0x00);
    //draw_pixel(x+7, y+8, 0x00);
    draw_pixel(x+7, y+7, 0x00);
    draw_pixel(x+6, y+6, 0x00);
    draw_pixel(x+5, y+5, 0x00);
    draw_pixel(x+4, y+4, 0x00);
    draw_pixel(x+3, y+3, 0x00);
    draw_pixel(x+2, y+2, 0x00);
    draw_pixel(x+1, y+1, 0x00);

    draw_vert_line(x+1, y+2, 9, 0x0f);
    draw_vert_line(x+2, y+3, 7, 0x0f);
    draw_vert_line(x+3, y+4, 5, 0x0f);
    draw_vert_line(x+4, y+5, 3, 0x0f);

    draw_pixel(x+5, y+6, 0x0f);
    draw_pixel(x+5, y+7, 0x0f);
    draw_pixel(x+6, y+7, 0x0f);
}

void draw_cursor_clickable(u16 x, u16 y){
    draw_vert_line(x, y, 12, 0x2b);

    draw_pixel(x+1, y+11, 0x2b);
    draw_pixel(x+2, y+10, 0x2b);
    draw_pixel(x+3, y+9, 0x2b);
    draw_pixel(x+4, y+8, 0x2b);
    draw_pixel(x+5, y+8, 0x2b);
    draw_pixel(x+6, y+8, 0x2b);
    //draw_pixel(x+7, y+8, 0x2b);
    draw_pixel(x+7, y+7, 0x2b);
    draw_pixel(x+6, y+6, 0x2b);
    draw_pixel(x+5, y+5, 0x2b);
    draw_pixel(x+4, y+4, 0x2b);
    draw_pixel(x+3, y+3, 0x2b);
    draw_pixel(x+2, y+2, 0x2b);
    draw_pixel(x+1, y+1, 0x2b);

    draw_vert_line(x+1, y+2, 9, 0x0f);
    draw_vert_line(x+2, y+3, 7, 0x0f);
    draw_vert_line(x+3, y+4, 5, 0x0f);
    draw_vert_line(x+4, y+5, 3, 0x0f);

    draw_pixel(x+5, y+6, 0x0f);
    draw_pixel(x+5, y+7, 0x0f);
    draw_pixel(x+6, y+7, 0x0f);
}

// print text
void print_text(u16 x, u16 y, u8 rgb, const char* txt){
    u8 i = 0;

    while(txt[i] != 0){
        for(u8 hor = 0; hor <= 5; hor++){               // iterate over x
            for(u8 ver = 0; ver <= 7; ver++){           // iterate over each y in x            
                if (text[txt[i]-32][hor] & (0b10000000 >> ver)){
                    draw_pixel(x+(i*6)+hor, y+ver, rgb);
                }
            }
        }
    i++;
    }
}


void print_hex(u16 x, u16 y, u8 rgb, u32 data){
    u8 hextotext[9] = {0};
    u32 temp;

    for (u8 j = 0; j < 8; j++){
        temp = data;

        temp = temp & (0b1111 << (j * 4));
        temp = temp >> (j*4);

        if (temp < 10){temp = temp + 48;}
        else {temp = temp + 55;}

        hextotext[7-j] = (u8)temp;
    }

    print_text(x, y, rgb, reinterpret_cast<const char *>(hextotext));
}